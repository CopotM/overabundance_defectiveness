# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
library(ggpirate)
library(reshape2)
library(corrplot)
library(brms)
# Chunk 3
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
french <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_french.csv")
estonian <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_estonian.csv")
estonian <- estonian[estonian$PROLIFIC_PID != "PROLIFIC_PID",]
# Chunk 4
french$language <- "French"
estonian$language <- "Estonian"
french <- french %>% mutate(item_cond = case_when(
grepl("de", recording) ~ "defective",
grepl("an", recording) ~ "anglicism",
grepl("un", recording) ~ "uncertain",
grepl("ag", recording) ~ "ungrammatical",
))
estonian <- estonian %>% mutate(item_cond = case_when(
grepl("oa", recording) ~ "overabundant",
grepl("an", recording) ~ "anglicism",
grepl("ug", recording) ~ "ungrammatical",
grepl("uc", recording) ~ "uncertain",
))
results <- rbind(estonian, french)
# Chunk 5
#items in the sentence frames
items <- read.csv("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/items.csv", sep = "\t")
items$recording = paste(items$language, items$type, items$no, sep = "_")
items$recording = paste0(items$recording, ".wav")
results$lexeme <-  items$verb[match(results$recording, items$recording)]
# Chunk 6
prs <- results %>% filter(Label == "lang_questions") %>%
filter(grepl("prescr",PennElementName))
prs$Value <- as.numeric(prs$Value)
ggplot(prs, aes(y = Value, x = PennElementName))+geom_violin()+facet_grid(~language)
prs_wide.est <- prs %>%  filter(language == "Estonian") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs_wide.fr <- prs %>%  filter(language == "French") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs.rcorr.est <- cor(as.matrix(prs_wide.est))
prs.rcorr.fr <- cor(as.matrix(prs_wide.fr))
corrplot(prs.rcorr.est, order = "AOE")
corrplot(prs.rcorr.fr, order = "AOE")
#create holistic prescriptivism score
prs_grouped_all <- prs %>% group_by(`MD5.hash.of.participant.s.IP.address`) %>% summarize(score = sum(Value))
results$prescr_general <- with(results, prs_grouped_all$score[match(`MD5.hash.of.participant.s.IP.address`, prs_grouped_all$`MD5.hash.of.participant.s.IP.address`)])
# Chunk 7
lex_check <- results[(results$PennElementName == "lex_checklist"),]
lex_check$known <- ifelse(lex_check$Value == "checked", 0, 1)
#there is orthographic variation between the PCIbex lexeme checklist file and the items file - fixing them before matching
lex_check <- lex_check %>%
mutate(Parameter = case_when(Parameter == "sheerima"~ "šeerima",
Parameter == "chatima"~ "tšättima",
Parameter == "cheatima" ~"tšiitima",
Parameter == "chillima" ~"tšillima",
.default = as.character(Parameter)))
lex_check$is_real <- ifelse(lex_check$Parameter %in% lexeme_stats$lexeme, 1, 0)
judgs$logfreq <- log(judgs$freq)
uncertains <- judgs %>% filter(item_cond %in% c("uncertain", "defective", "overabundant"))
ggplot(judgs, aes(x = logfreq, y = Value, color = item_cond)) + geom_point(alpha = 0.5) +
facet_grid(partic_condition~language, scales = "free_x") + geom_smooth(method = "lm")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
library(ggpirate)
library(reshape2)
library(corrplot)
library(brms)
# Chunk 3
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
french <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_french.csv")
estonian <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_estonian.csv")
estonian <- estonian[estonian$PROLIFIC_PID != "PROLIFIC_PID",]
# Chunk 4
french$language <- "French"
estonian$language <- "Estonian"
french <- french %>% mutate(item_cond = case_when(
grepl("de", recording) ~ "defective",
grepl("an", recording) ~ "anglicism",
grepl("un", recording) ~ "uncertain",
grepl("ag", recording) ~ "ungrammatical",
))
estonian <- estonian %>% mutate(item_cond = case_when(
grepl("oa", recording) ~ "overabundant",
grepl("an", recording) ~ "anglicism",
grepl("ug", recording) ~ "ungrammatical",
grepl("uc", recording) ~ "uncertain",
))
results <- rbind(estonian, french)
# Chunk 5
#items in the sentence frames
items <- read.csv("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/items.csv", sep = "\t")
items$recording = paste(items$language, items$type, items$no, sep = "_")
items$recording = paste0(items$recording, ".wav")
results$lexeme <-  items$verb[match(results$recording, items$recording)]
# Chunk 6
prs <- results %>% filter(Label == "lang_questions") %>%
filter(grepl("prescr",PennElementName))
prs$Value <- as.numeric(prs$Value)
ggplot(prs, aes(y = Value, x = PennElementName))+geom_violin()+facet_grid(~language)
prs_wide.est <- prs %>%  filter(language == "Estonian") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs_wide.fr <- prs %>%  filter(language == "French") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs.rcorr.est <- cor(as.matrix(prs_wide.est))
prs.rcorr.fr <- cor(as.matrix(prs_wide.fr))
corrplot(prs.rcorr.est, order = "AOE")
corrplot(prs.rcorr.fr, order = "AOE")
#create holistic prescriptivism score
prs_grouped_all <- prs %>% group_by(`MD5.hash.of.participant.s.IP.address`) %>% summarize(score = sum(Value))
results$prescr_general <- with(results, prs_grouped_all$score[match(`MD5.hash.of.participant.s.IP.address`, prs_grouped_all$`MD5.hash.of.participant.s.IP.address`)])
# Chunk 7
lex_check <- results[(results$PennElementName == "lex_checklist"),]
lex_check$known <- ifelse(lex_check$Value == "checked", 0, 1)
#there is orthographic variation between the PCIbex lexeme checklist file and the items file - fixing them before matching
lex_check <- lex_check %>%
mutate(Parameter = case_when(Parameter == "sheerima"~ "šeerima",
Parameter == "chatima"~ "tšättima",
Parameter == "cheatima" ~"tšiitima",
Parameter == "chillima" ~"tšillima",
.default = as.character(Parameter)))
lex_check$is_real <- ifelse(lex_check$Parameter %in% lexeme_stats$lexeme, 1, 0)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
library(ggpirate)
library(reshape2)
library(corrplot)
library(brms)
# Chunk 3
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
french <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_french.csv")
estonian <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_estonian.csv")
estonian <- estonian[estonian$PROLIFIC_PID != "PROLIFIC_PID",]
# Chunk 4
french$language <- "French"
estonian$language <- "Estonian"
french <- french %>% mutate(item_cond = case_when(
grepl("de", recording) ~ "defective",
grepl("an", recording) ~ "anglicism",
grepl("un", recording) ~ "uncertain",
grepl("ag", recording) ~ "ungrammatical",
))
estonian <- estonian %>% mutate(item_cond = case_when(
grepl("oa", recording) ~ "overabundant",
grepl("an", recording) ~ "anglicism",
grepl("ug", recording) ~ "ungrammatical",
grepl("uc", recording) ~ "uncertain",
))
results <- rbind(estonian, french)
# Chunk 5
#items in the sentence frames
items <- read.csv("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/items.csv", sep = "\t")
items$recording = paste(items$language, items$type, items$no, sep = "_")
items$recording = paste0(items$recording, ".wav")
results$lexeme <-  items$verb[match(results$recording, items$recording)]
# Chunk 6
prs <- results %>% filter(Label == "lang_questions") %>%
filter(grepl("prescr",PennElementName))
prs$Value <- as.numeric(prs$Value)
ggplot(prs, aes(y = Value, x = PennElementName))+geom_violin()+facet_grid(~language)
prs_wide.est <- prs %>%  filter(language == "Estonian") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs_wide.fr <- prs %>%  filter(language == "French") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs.rcorr.est <- cor(as.matrix(prs_wide.est))
prs.rcorr.fr <- cor(as.matrix(prs_wide.fr))
corrplot(prs.rcorr.est, order = "AOE")
corrplot(prs.rcorr.fr, order = "AOE")
#create holistic prescriptivism score
prs_grouped_all <- prs %>% group_by(`MD5.hash.of.participant.s.IP.address`) %>% summarize(score = sum(Value))
results$prescr_general <- with(results, prs_grouped_all$score[match(`MD5.hash.of.participant.s.IP.address`, prs_grouped_all$`MD5.hash.of.participant.s.IP.address`)])
# Chunk 7
#frequency, local entropy, surprisal for each lexeme
lexeme_stats <- read.csv("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/lexeme_stats.tsv", sep = "\t")
results$freq <- lexeme_stats$frequency[match(results$lexeme, lexeme_stats$lexeme)]
# Chunk 8
lex_check <- results[(results$PennElementName == "lex_checklist"),]
lex_check$known <- ifelse(lex_check$Value == "checked", 0, 1)
#there is orthographic variation between the PCIbex lexeme checklist file and the items file - fixing them before matching
lex_check <- lex_check %>%
mutate(Parameter = case_when(Parameter == "sheerima"~ "šeerima",
Parameter == "chatima"~ "tšättima",
Parameter == "cheatima" ~"tšiitima",
Parameter == "chillima" ~"tšillima",
.default = as.character(Parameter)))
lex_check$is_real <- ifelse(lex_check$Parameter %in% lexeme_stats$lexeme, 1, 0)
#percentage of pseudolexemes reported as known by participant
participants_attention <- lex_check %>% group_by(MD5.hash.of.participant.s.IP.address) %>%
filter(is_real == 0) %>%
summarise(false_positives = sum(known)/36)
summary(participants_attention$false_positives)
#choice of threshold of 15% false positives based on distribution
bad_participants <- participants_attention[participants_attention$false_positives > 0.15,]$MD5.hash.of.participant.s.IP.address
results <- results %>% filter(!MD5.hash.of.participant.s.IP.address %in% bad_participants)
demo <- results %>% filter(PennElementName == "demo_html")
results$age <-  demo[demo$Parameter == "age",]$Value[match(results$MD5.hash.of.participant.s.IP.address, demo$MD5.hash.of.participant.s.IP.address)]
results$educ <-  demo[grepl("dipl", demo$Parameter),]$Value[match(results$MD5.hash.of.participant.s.IP.address, demo$MD5.hash.of.participant.s.IP.address)]
results$gender <-  demo[ demo$Parameter == "sex",]$Value[match(results$MD5.hash.of.participant.s.IP.address, demo$MD5.hash.of.participant.s.IP.address)]
judgs <- results %>%
filter(PennElementName == "slider_judg") %>%
filter(grepl("wav", recording)) %>%
filter(Parameter == "Choice") %>%
mutate(Value = as.numeric(Value))
lex_check$key <- paste(lex_check$`MD5.hash.of.participant.s.IP.address`, lex_check$Parameter, sep = "~")
judgs$key <- paste(judgs$`MD5.hash.of.participant.s.IP.address`, judgs$lexeme, sep = "~")
judgs$known <- with(judgs, lex_check$known[match(key,lex_check$key)])
judgs <- judgs %>% filter(known == 1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
library(ggpirate)
library(reshape2)
library(corrplot)
library(brms)
# Chunk 3
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
french <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_french.csv")
estonian <- read.pcibex("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/results_def_oa_estonian.csv")
estonian <- estonian[estonian$PROLIFIC_PID != "PROLIFIC_PID",]
# Chunk 4
french$language <- "French"
estonian$language <- "Estonian"
french <- french %>% mutate(item_cond = case_when(
grepl("de", recording) ~ "defective",
grepl("an", recording) ~ "anglicism",
grepl("un", recording) ~ "uncertain",
grepl("ag", recording) ~ "ungrammatical",
))
estonian <- estonian %>% mutate(item_cond = case_when(
grepl("oa", recording) ~ "overabundant",
grepl("an", recording) ~ "anglicism",
grepl("ug", recording) ~ "ungrammatical",
grepl("uc", recording) ~ "uncertain",
))
results <- rbind(estonian, french)
# Chunk 5
#items in the sentence frames
items <- read.csv("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/items.csv", sep = "\t")
items$recording = paste(items$language, items$type, items$no, sep = "_")
items$recording = paste0(items$recording, ".wav")
results$lexeme <-  items$verb[match(results$recording, items$recording)]
# Chunk 6
prs <- results %>% filter(Label == "lang_questions") %>%
filter(grepl("prescr",PennElementName))
prs$Value <- as.numeric(prs$Value)
ggplot(prs, aes(y = Value, x = PennElementName))+geom_violin()+facet_grid(~language)
prs_wide.est <- prs %>%  filter(language == "Estonian") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs_wide.fr <- prs %>%  filter(language == "French") %>%
dcast(`MD5.hash.of.participant.s.IP.address`~ PennElementName, value.var = "Value") %>% select(-`MD5.hash.of.participant.s.IP.address`)
prs.rcorr.est <- cor(as.matrix(prs_wide.est))
prs.rcorr.fr <- cor(as.matrix(prs_wide.fr))
corrplot(prs.rcorr.est, order = "AOE")
corrplot(prs.rcorr.fr, order = "AOE")
#create holistic prescriptivism score
prs_grouped_all <- prs %>% group_by(`MD5.hash.of.participant.s.IP.address`) %>% summarize(score = sum(Value))
results$prescr_general <- with(results, prs_grouped_all$score[match(`MD5.hash.of.participant.s.IP.address`, prs_grouped_all$`MD5.hash.of.participant.s.IP.address`)])
# Chunk 7
#frequency, local entropy, surprisal for each lexeme
lexeme_stats <- read.csv("/Users/mariacopot/Desktop/git_repos/overabundance_defectiveness/analysis/lexeme_stats.tsv", sep = "\t")
results$freq <- lexeme_stats$frequency[match(results$lexeme, lexeme_stats$lexeme)]
# Chunk 8
lex_check <- results[(results$PennElementName == "lex_checklist"),]
lex_check$known <- ifelse(lex_check$Value == "checked", 0, 1)
#there is orthographic variation between the PCIbex lexeme checklist file and the items file - fixing them before matching
lex_check <- lex_check %>%
mutate(Parameter = case_when(Parameter == "sheerima"~ "šeerima",
Parameter == "chatima"~ "tšättima",
Parameter == "cheatima" ~"tšiitima",
Parameter == "chillima" ~"tšillima",
.default = as.character(Parameter)))
lex_check$is_real <- ifelse(lex_check$Parameter %in% lexeme_stats$lexeme, 1, 0)
#percentage of pseudolexemes reported as known by participant
participants_attention <- lex_check %>% group_by(MD5.hash.of.participant.s.IP.address) %>%
filter(is_real == 0) %>%
summarise(false_positives = sum(known)/36)
summary(participants_attention$false_positives)
#choice of threshold of 15% false positives based on distribution
bad_participants <- participants_attention[participants_attention$false_positives > 0.15,]$MD5.hash.of.participant.s.IP.address
results <- results %>% filter(!MD5.hash.of.participant.s.IP.address %in% bad_participants)
# Chunk 9
demo <- results %>% filter(PennElementName == "demo_html")
results$age <-  demo[demo$Parameter == "age",]$Value[match(results$MD5.hash.of.participant.s.IP.address, demo$MD5.hash.of.participant.s.IP.address)]
results$educ <-  demo[grepl("dipl", demo$Parameter),]$Value[match(results$MD5.hash.of.participant.s.IP.address, demo$MD5.hash.of.participant.s.IP.address)]
results$gender <-  demo[ demo$Parameter == "sex",]$Value[match(results$MD5.hash.of.participant.s.IP.address, demo$MD5.hash.of.participant.s.IP.address)]
# Chunk 10
judgs <- results %>%
filter(PennElementName == "slider_judg") %>%
filter(grepl("wav", recording)) %>%
filter(Parameter == "Choice") %>%
mutate(Value = as.numeric(Value))
# Chunk 11
lex_check$key <- paste(lex_check$`MD5.hash.of.participant.s.IP.address`, lex_check$Parameter, sep = "~")
judgs$key <- paste(judgs$`MD5.hash.of.participant.s.IP.address`, judgs$lexeme, sep = "~")
judgs$known <- with(judgs, lex_check$known[match(key,lex_check$key)])
judgs <- judgs %>% filter(known == 1)
ggplot(judgs, aes(y = Value, x = item_cond, color = item_cond)) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
facet_grid(partic_condition~language, scales = "free_x")
ggplot(judgs, aes(y = Value, x = item_cond, color = item_cond)) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.2) +
facet_grid(partic_condition~language, scales = "free_x")
ggplot(judgs, aes(y = Value, x = item_cond, color = item_cond)) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1) +
facet_grid(partic_condition~language, scales = "free_x")
ggplot(judgs, aes(y = Value, x = item_cond, color = item_cond)) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1) +
facet_grid(language~partic_condition, scales = "free")
ggplot(judgs, aes(y = Value, x = item_cond, color = item_cond)) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1) +
facet_grid(partic_condition~language, scales = "free")
ggplot(judgs[judgs$language == "Estonian"], aes(x = lexeme, y = Value)) + facet_grid(~partic_condition) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1) +
```
ggplot(judgs[judgs$language == "Estonian"], aes(x = lexeme, y = Value)) +
facet_grid(~partic_condition) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1) +
```
ggplot(judgs[judgs$language == "Estonian"], aes(x = lexeme, y = Value)) +
facet_grid(~partic_condition) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs[judgs$language == "Estonian",], aes(x = lexeme, y = Value)) +
facet_grid(~partic_condition) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs[(judgs$language == "Estonian") & (judgs$item_cond == "overabundant"),], aes(x = lexeme, y = Value)) +
facet_grid(~partic_condition) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs[(judgs$language == "Estonian") & (judgs$item_cond == "overabundant"),], aes(x = lexeme, y = Value)) +
facet_grid(partic_condition~) +
ggplot(judgs[(judgs$language == "Estonian") & (judgs$item_cond == "overabundant"),], aes(x = lexeme, y = Value)) +
facet_wrap(partic_condition) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs[(judgs$language == "Estonian") & (judgs$item_cond == "overabundant"),], aes(x = lexeme, y = Value)) +
facet_wrap(~partic_condition) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs[(judgs$language == "Estonian") & (judgs$item_cond == "overabundant"),], aes(x = lexeme, y = Value)) +
facet_wrap(~partic_condition, nrow = 1) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs[(judgs$language == "Estonian") & (judgs$item_cond == "overabundant"),], aes(x = lexeme, y = Value)) +
facet_wrap(~partic_condition, nrow = 2) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs[(judgs$language == "Estonian") & (judgs$item_cond == "overabundant"),], aes(x = fct_reorder(lexeme, Value), y = Value)) +
facet_wrap(~partic_condition, nrow = 2) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1)
ggplot(judgs, aes(y = Value, x = item_cond, color = item_cond)) +
geom_jitter(alpha = 0.2, width = 0.3) +
geom_violin(alpha = 0.5, scale = "width") +
geom_boxplot(width = 0.1) +
facet_grid(partic_condition~language, scales = "free")
judgs$logfreq <- log(judgs$freq)
uncertains <- judgs %>% filter(item_cond %in% c("uncertain", "defective", "overabundant"))
ggplot(judgs, aes(x = logfreq, y = Value, color = item_cond)) + geom_point(alpha = 0.5) +
facet_grid(partic_condition~language, scales = "free_x") + geom_smooth(method = "lm")
